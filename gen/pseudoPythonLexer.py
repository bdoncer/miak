# Generated from D:/Programming/PycharmProjects/miak\pseudoPython.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,27,180,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,
        1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,
        1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,
        1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,
        1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
        1,17,3,17,129,8,17,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,20,1,21,
        1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,
        152,8,22,1,23,3,23,155,8,23,1,23,5,23,158,8,23,10,23,12,23,161,9,
        23,1,24,3,24,164,8,24,1,24,4,24,167,8,24,11,24,12,24,168,1,25,1,
        25,1,26,1,26,4,26,175,8,26,11,26,12,26,176,1,26,1,26,0,0,27,1,1,
        3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
        29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,
        51,26,53,27,1,0,7,2,0,60,60,62,62,5,0,37,37,42,43,45,45,47,47,94,
        94,3,0,9,10,13,13,32,32,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,
        95,97,122,1,0,48,57,6,0,9,10,13,13,32,32,48,57,65,90,97,122,188,
        0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
        1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
        1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
        1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,
        1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,
        1,0,0,0,0,53,1,0,0,0,1,55,1,0,0,0,3,58,1,0,0,0,5,61,1,0,0,0,7,66,
        1,0,0,0,9,72,1,0,0,0,11,76,1,0,0,0,13,83,1,0,0,0,15,87,1,0,0,0,17,
        90,1,0,0,0,19,95,1,0,0,0,21,99,1,0,0,0,23,108,1,0,0,0,25,110,1,0,
        0,0,27,112,1,0,0,0,29,114,1,0,0,0,31,116,1,0,0,0,33,118,1,0,0,0,
        35,128,1,0,0,0,37,130,1,0,0,0,39,132,1,0,0,0,41,134,1,0,0,0,43,138,
        1,0,0,0,45,151,1,0,0,0,47,154,1,0,0,0,49,163,1,0,0,0,51,170,1,0,
        0,0,53,172,1,0,0,0,55,56,5,60,0,0,56,57,5,45,0,0,57,2,1,0,0,0,58,
        59,5,105,0,0,59,60,5,102,0,0,60,4,1,0,0,0,61,62,5,101,0,0,62,63,
        5,108,0,0,63,64,5,115,0,0,64,65,5,101,0,0,65,6,1,0,0,0,66,67,5,119,
        0,0,67,68,5,104,0,0,68,69,5,105,0,0,69,70,5,108,0,0,70,71,5,101,
        0,0,71,8,1,0,0,0,72,73,5,102,0,0,73,74,5,111,0,0,74,75,5,114,0,0,
        75,10,1,0,0,0,76,77,5,114,0,0,77,78,5,101,0,0,78,79,5,116,0,0,79,
        80,5,117,0,0,80,81,5,114,0,0,81,82,5,110,0,0,82,12,1,0,0,0,83,84,
        5,97,0,0,84,85,5,110,0,0,85,86,5,100,0,0,86,14,1,0,0,0,87,88,5,111,
        0,0,88,89,5,114,0,0,89,16,1,0,0,0,90,91,5,115,0,0,91,92,5,107,0,
        0,92,93,5,105,0,0,93,94,5,112,0,0,94,18,1,0,0,0,95,96,5,110,0,0,
        96,97,5,111,0,0,97,98,5,116,0,0,98,20,1,0,0,0,99,100,5,102,0,0,100,
        101,5,117,0,0,101,102,5,110,0,0,102,103,5,99,0,0,103,104,5,116,0,
        0,104,105,5,105,0,0,105,106,5,111,0,0,106,107,5,110,0,0,107,22,1,
        0,0,0,108,109,5,123,0,0,109,24,1,0,0,0,110,111,5,125,0,0,111,26,
        1,0,0,0,112,113,5,40,0,0,113,28,1,0,0,0,114,115,5,41,0,0,115,30,
        1,0,0,0,116,117,5,91,0,0,117,32,1,0,0,0,118,119,5,93,0,0,119,34,
        1,0,0,0,120,129,5,61,0,0,121,122,5,62,0,0,122,129,5,61,0,0,123,124,
        5,60,0,0,124,129,5,61,0,0,125,129,7,0,0,0,126,127,5,33,0,0,127,129,
        5,61,0,0,128,120,1,0,0,0,128,121,1,0,0,0,128,123,1,0,0,0,128,125,
        1,0,0,0,128,126,1,0,0,0,129,36,1,0,0,0,130,131,7,1,0,0,131,38,1,
        0,0,0,132,133,5,44,0,0,133,40,1,0,0,0,134,135,5,46,0,0,135,136,5,
        46,0,0,136,137,5,46,0,0,137,42,1,0,0,0,138,139,7,2,0,0,139,140,1,
        0,0,0,140,141,6,21,0,0,141,44,1,0,0,0,142,143,5,116,0,0,143,144,
        5,114,0,0,144,145,5,117,0,0,145,152,5,101,0,0,146,147,5,102,0,0,
        147,148,5,97,0,0,148,149,5,108,0,0,149,150,5,115,0,0,150,152,5,101,
        0,0,151,142,1,0,0,0,151,146,1,0,0,0,152,46,1,0,0,0,153,155,7,3,0,
        0,154,153,1,0,0,0,155,159,1,0,0,0,156,158,7,4,0,0,157,156,1,0,0,
        0,158,161,1,0,0,0,159,157,1,0,0,0,159,160,1,0,0,0,160,48,1,0,0,0,
        161,159,1,0,0,0,162,164,5,45,0,0,163,162,1,0,0,0,163,164,1,0,0,0,
        164,166,1,0,0,0,165,167,7,5,0,0,166,165,1,0,0,0,167,168,1,0,0,0,
        168,166,1,0,0,0,168,169,1,0,0,0,169,50,1,0,0,0,170,171,5,59,0,0,
        171,52,1,0,0,0,172,174,5,34,0,0,173,175,7,6,0,0,174,173,1,0,0,0,
        175,176,1,0,0,0,176,174,1,0,0,0,176,177,1,0,0,0,177,178,1,0,0,0,
        178,179,5,34,0,0,179,54,1,0,0,0,9,0,128,151,154,157,159,163,168,
        176,1,6,0,0
    ]

class pseudoPythonLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    ASSIGN = 1
    IF_TOKEN = 2
    ELSE_TOKEN = 3
    WHILE_TOKEN = 4
    FOR_TOKEN = 5
    RETURN_TOKEN = 6
    AND_TOKEN = 7
    OR_TOKEN = 8
    SKIP_TOKEN = 9
    NOT_TOKEN = 10
    FUNCTION_TOKEN = 11
    CURLY_BRACKET_BEGIN = 12
    CURLY_BRACKET_END = 13
    ROUND_BRACKET_BEGIN = 14
    ROUND_BRACKET_END = 15
    SQUARE_BRACKET_BEGIN = 16
    SQUARE_BRACKET_END = 17
    COMPARISON_OPERATORS = 18
    MATH_OPERATORS = 19
    COMMA = 20
    BETWEEN = 21
    WHITESPACE = 22
    BOOLEAN = 23
    ID = 24
    NUMBER = 25
    SEMICOLON = 26
    STRING = 27

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'<-'", "'if'", "'else'", "'while'", "'for'", "'return'", "'and'", 
            "'or'", "'skip'", "'not'", "'function'", "'{'", "'}'", "'('", 
            "')'", "'['", "']'", "','", "'...'", "';'" ]

    symbolicNames = [ "<INVALID>",
            "ASSIGN", "IF_TOKEN", "ELSE_TOKEN", "WHILE_TOKEN", "FOR_TOKEN", 
            "RETURN_TOKEN", "AND_TOKEN", "OR_TOKEN", "SKIP_TOKEN", "NOT_TOKEN", 
            "FUNCTION_TOKEN", "CURLY_BRACKET_BEGIN", "CURLY_BRACKET_END", 
            "ROUND_BRACKET_BEGIN", "ROUND_BRACKET_END", "SQUARE_BRACKET_BEGIN", 
            "SQUARE_BRACKET_END", "COMPARISON_OPERATORS", "MATH_OPERATORS", 
            "COMMA", "BETWEEN", "WHITESPACE", "BOOLEAN", "ID", "NUMBER", 
            "SEMICOLON", "STRING" ]

    ruleNames = [ "ASSIGN", "IF_TOKEN", "ELSE_TOKEN", "WHILE_TOKEN", "FOR_TOKEN", 
                  "RETURN_TOKEN", "AND_TOKEN", "OR_TOKEN", "SKIP_TOKEN", 
                  "NOT_TOKEN", "FUNCTION_TOKEN", "CURLY_BRACKET_BEGIN", 
                  "CURLY_BRACKET_END", "ROUND_BRACKET_BEGIN", "ROUND_BRACKET_END", 
                  "SQUARE_BRACKET_BEGIN", "SQUARE_BRACKET_END", "COMPARISON_OPERATORS", 
                  "MATH_OPERATORS", "COMMA", "BETWEEN", "WHITESPACE", "BOOLEAN", 
                  "ID", "NUMBER", "SEMICOLON", "STRING" ]

    grammarFileName = "pseudoPython.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


